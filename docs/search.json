[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html",
    "href": "posts/basic-linear-regression-tutorial/index.html",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "",
    "text": "As data scientists, we are often interested in understanding the relationship between variables in our dataset. Linear regression is a fundamental statistical method that allows us to model such relationships. This tutorial will guide you step-by-step through implementing a linear regression model in Python using the Scikit-Learn library."
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#understanding-linear-regression",
    "href": "posts/basic-linear-regression-tutorial/index.html#understanding-linear-regression",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Understanding Linear Regression",
    "text": "Understanding Linear Regression\nLet us first understand the theory behind linear regression. It aims to find the best-fit line through a set of data points that predicts the value of a dependent variable based on some independent variables. The simplest form, known as simple linear regression, can be expressed as:\n\\(Y = a + bX + \\epsilon\\)\nHere, \\(Y\\) is the dependent variable we are trying to predict, \\(X\\) is the independent variable, \\(a\\) is the intercept of the best-fit line, \\(b\\) is the slope of the best-fit line, and \\(\\epsilon\\) is the error term."
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#the-scikit-learn-library",
    "href": "posts/basic-linear-regression-tutorial/index.html#the-scikit-learn-library",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "The Scikit-Learn Library",
    "text": "The Scikit-Learn Library\nScikit-Learn is an open-source Python library designed for data analysis and machine learning. Its simplicity and functionalities make it easy for beginners to use. In this tutorial, we will be using LinearRegression class to build our linear regression model."
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#getting-started",
    "href": "posts/basic-linear-regression-tutorial/index.html#getting-started",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Getting Started",
    "text": "Getting Started\nBefore you begin, ensure you have the Scikit-Learn library installed. You can use the following command to install Scikit-Learn if you haven not done so:\npip install scikit-learn\nAlso, ensure you have the numpy and pandas libraries installed."
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#step-1-preparing-the-data",
    "href": "posts/basic-linear-regression-tutorial/index.html#step-1-preparing-the-data",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Step 1: Preparing the Data",
    "text": "Step 1: Preparing the Data\nThe first step is to prepare your data. You can create a dataframe by reading from a data source such as CSV file or database. For this tutorial, assuming that you have a dataframe already generated that contains two columns: experience and salary. You are trying to predict the salary of an employee given the years of experience in the job.\nimport pandas as pd\ndata = pd.DataFrame({\n    'Experience': [1, 2, 3, 4, 5],\n    'Salary': [1300, 2200, 3500, 3800, 4200]\n})"
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#step-2-splitting-the-data",
    "href": "posts/basic-linear-regression-tutorial/index.html#step-2-splitting-the-data",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Step 2: Splitting the Data",
    "text": "Step 2: Splitting the Data\nNext, split your data into a training set and a test set. The training set will help to train our model while the test set helps to evaluate the model’s performance on unseen data. Scikit-Learn’s train_test_split function simplifies this process. The test_size parameter controls the percentage of data that will be used as the test set. In the example below, 80% of the data is used as the training set and 20% as the test set.\nfrom sklearn.model_selection import train_test_split\n\nX = data[['Experience']]\ny = data['Salary']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#step-3-building-and-training-the-model",
    "href": "posts/basic-linear-regression-tutorial/index.html#step-3-building-and-training-the-model",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Step 3: Building and Training the Model",
    "text": "Step 3: Building and Training the Model\nWith your data split, you can now build and train your linear regression model. Scikit-Learn’s LinearRegression class allows you to do so.\nfrom sklearn.linear_model import LinearRegression\n\n# Initialize the model\nmodel = LinearRegression()\n\n# Fit the model to the training data\nmodel.fit(X_train, y_train)"
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#step-4-making-predictions-with-the-model",
    "href": "posts/basic-linear-regression-tutorial/index.html#step-4-making-predictions-with-the-model",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Step 4: Making Predictions with the Model",
    "text": "Step 4: Making Predictions with the Model\nOnce your model is trained, you can use it to make predictions on the test set.\npredictions = model.predict(X_test)"
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#step-5-evaluating-the-accuracy-of-the-model",
    "href": "posts/basic-linear-regression-tutorial/index.html#step-5-evaluating-the-accuracy-of-the-model",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Step 5: Evaluating the Accuracy of the Model",
    "text": "Step 5: Evaluating the Accuracy of the Model\nEvaluating your model’s accuracy is a crucial step in understanding its performance. For linear regression, Scikit-Learn provides several metrics to analyze the accuracy of the model. In our tutorial, we will use a metric called the Mean Squared Error (MSE).\nfrom sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(y_test, predictions)\n\nprint(f\"Mean Squared Error: {mse}\")\nMSE gives an idea of the average error squared. A smaller error indicates that the predictions made by the model are closer to the actual values, signifying better model performance."
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#conclusion",
    "href": "posts/basic-linear-regression-tutorial/index.html#conclusion",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "Conclusion",
    "text": "Conclusion\nWell done! You have successfully built, trained and evaluated your first linear regression mode using the Scikit-Learn library in Python. With this basic knowledge, you can try implementing a more advanced model based on real-world data. You can also look into more functionalities that the Scikit-Learn library provides."
  },
  {
    "objectID": "posts/basic-linear-regression-tutorial/index.html#references",
    "href": "posts/basic-linear-regression-tutorial/index.html#references",
    "title": "Basic Linear Regression Tutorial Using Python",
    "section": "References",
    "text": "References\n\nPedregosa, F., Varoquaux, G., Gramfort, A., Michel, V., Thirion, B., Grisel, O., … & Duchesnay, É. (2011). Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research, 12, 2825-2830. Link"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Basic Linear Regression Tutorial Using Python\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 17, 2025\n\n\nCheng Zhang\n\n\n\n\n\n\nNo matching items"
  }
]